#ifndef __SOCCER_BALL__H
#define __SOCCER_BALL__H 

#include "enviro.h"
#include "styles.h"
#include <math.h>
#include <json/json.h>

using namespace std::chrono;
using namespace enviro;
using nlohmann::json;

class BallController : public Process, public AgentInterface {

    public:
    BallController() : Process(), AgentInterface() {}
    // Initializes the BallController and sets the style of the ball
    // If the reset button is pressed, the ball teleports to the center
    void init() {
		allow_rotation();
    	std::string svg = "<g id='surface1'><path style=' stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;' d='M 10.046875 -0.101562 C 4.5 -0.101562 0 4.398438 0 9.949219 C 0 15.5 4.5 20 10.046875 20 C 15.597656 20 20.097656 15.5 20.097656 9.949219 C 20.097656 4.398438 15.597656 -0.101562 10.046875 -0.101562 Z M 10.046875 0 C 11.355469 0 12.601562 0.253906 13.746094 0.710938 C 13.796875 1.203125 13.777344 1.753906 13.695312 2.351562 C 12.410156 2.421875 11.246094 2.679688 10.210938 3.125 C 9.273438 2.523438 8.011719 2.160156 6.546875 2.15625 C 6.546875 1.527344 6.511719 1.03125 6.453125 0.671875 C 7.566406 0.238281 8.78125 0 10.046875 0 Z M 13.851562 0.753906 C 16.164062 1.714844 18.039062 3.515625 19.085938 5.78125 L 18.804688 6.171875 C 18.132812 5.703125 17.28125 5.402344 16.417969 5.203125 C 16.417969 5.203125 16.414062 5.203125 16.414062 5.203125 C 15.507812 3.851562 14.636719 2.910156 13.792969 2.375 C 13.875 1.789062 13.898438 1.246094 13.851562 0.753906 Z M 6.527344 2.253906 C 6.527344 2.253906 6.53125 2.253906 6.53125 2.253906 C 7.988281 2.257812 9.234375 2.613281 10.15625 3.203125 C 10.351562 4.304688 10.511719 5.464844 10.640625 6.6875 C 9.050781 8.011719 7.925781 9.058594 7.386719 9.730469 C 6.164062 9.347656 5.007812 9.058594 3.910156 8.859375 C 3.578125 7.933594 3.339844 6.613281 3.273438 5.015625 C 4.324219 3.578125 5.410156 2.65625 6.527344 2.253906 Z M 2.285156 4.921875 C 2.570312 4.921875 2.867188 4.960938 3.171875 5.03125 C 3.242188 6.628906 3.484375 7.953125 3.816406 8.890625 C 3.046875 9.929688 2.59375 11 2.453125 12.097656 C 1.863281 12.230469 1.199219 12.273438 0.546875 12.140625 C 0.542969 12.140625 0.542969 12.144531 0.542969 12.140625 C 0.421875 11.96875 0.320312 11.769531 0.230469 11.550781 C 0.144531 11.03125 0.0976562 10.496094 0.0976562 9.949219 C 0.0976562 8.160156 0.570312 6.484375 1.394531 5.03125 C 1.679688 4.957031 1.976562 4.917969 2.285156 4.921875 Z M 16.414062 5.308594 C 17.261719 5.507812 18.097656 5.796875 18.75 6.25 C 19.476562 8.039062 19.808594 9.429688 19.75 10.429688 C 19.285156 11.753906 18.636719 12.757812 17.976562 13.417969 C 17.039062 12.980469 16.25 12.632812 15.609375 12.375 C 15.542969 11.105469 15.21875 9.589844 14.6875 7.992188 C 15.382812 6.976562 15.960938 6.082031 16.414062 5.308594 Z M 10.703125 6.761719 C 12 7.023438 13.292969 7.445312 14.589844 8.023438 C 15.121094 9.617188 15.445312 11.132812 15.511719 12.390625 C 15.511719 12.394531 15.511719 12.394531 15.511719 12.394531 C 14.605469 13.488281 13.605469 14.390625 12.511719 15.109375 C 10.917969 14.84375 9.460938 14.382812 8.332031 13.785156 C 7.945312 12.234375 7.65625 10.90625 7.457031 9.796875 C 7.984375 9.136719 9.113281 8.089844 10.703125 6.761719 Z M 19.839844 10.480469 L 19.984375 10.527344 C 19.839844 13.007812 18.789062 15.246094 17.15625 16.910156 L 16.875 16.609375 C 17.515625 15.507812 17.90625 14.46875 18.042969 13.492188 C 18.710938 12.824219 19.371094 11.8125 19.839844 10.480469 Z M 2.46875 12.203125 C 2.9375 13.371094 3.789062 14.414062 5.019531 15.328125 C 5.085938 16.378906 5.296875 17.367188 5.75 18.167969 C 5.339844 18.253906 4.886719 18.242188 4.394531 18.136719 C 2.617188 16.90625 1.257812 15.117188 0.578125 13.015625 C 0.558594 12.746094 0.550781 12.488281 0.546875 12.242188 C 1.210938 12.371094 1.875 12.332031 2.46875 12.203125 Z M 8.296875 13.875 C 9.425781 14.472656 10.875 14.933594 12.464844 15.203125 C 12.71875 16.03125 12.941406 16.890625 13.132812 17.78125 C 12.410156 18.632812 11.257812 19.246094 9.75 19.449219 C 8.285156 19.316406 6.988281 18.882812 5.855469 18.152344 C 5.398438 17.363281 5.1875 16.378906 5.121094 15.320312 C 6.269531 14.871094 7.328125 14.390625 8.296875 13.875 Z M 16.808594 16.683594 L 17.085938 16.984375 C 15.285156 18.785156 12.796875 19.898438 10.046875 19.898438 C 9.964844 19.898438 9.882812 19.898438 9.800781 19.894531 L 9.761719 19.546875 C 11.292969 19.339844 12.472656 18.71875 13.210938 17.84375 C 14.753906 17.773438 15.953125 17.386719 16.808594 16.683594 Z M 16.808594 16.683594 '/></g>";
		json style = { { "style", svg } };    
		set_style(style);
    watch("button_click", [&](Event& e) {
      if ( e.value()["value"] == "reset" ) {
         teleport(0, 0, 0);
      }
    });
  }
    void start() {}
    // Ball controller update method. If one of the players scores, an event is emmitted
    // which allows the players to keep score, the ball then teleports to the center.
    // Also contains the physics for allowing the ball to bounds off of walls
    void update() {
		_t = high_resolution_clock::now();
		if (position().x > 275.0 && position().y < 75.0 && position().y > -75.0) {
			teleport(0,0,0);
			emit(Event("two_score"));
		} else if (position().x < -275 && position().y < 75.0 && position().y > -75.0) {
			teleport(0,0,0);
			emit(Event("one_score"));
        // Newton's third law for ball bouncing off of walls. Fa = -Fb,
        //  where F = m * dv/dt and  where m = 1
		} else if (x() <= -320.0 || x() >= 320.0 || y() <= -170.0 || y() >= 170.0) {
			t_delta = abs(((_t2 - _t).count() / 1000000000.0));
			vx_delta = (velx - vx());
			vy_delta = (vely - vy());
			fx = -1 * (vx_delta / t_delta);
			fy = -1 * (vy_delta / t_delta);
			omni_apply_force(fx, fy);
		}
		_t2 = _t;
		velx = vx();
		vely = vy();
	}
    void stop() {}
    high_resolution_clock::time_point _t;
    high_resolution_clock::time_point _t2;
    double velx, vely, fx, fy, t_delta, vx_delta, vy_delta;

};
// Ball class. adds the process for BallController
class Ball : public Agent {
    public:
    Ball(json spec, World& world) : Agent(spec, world) {
        add_process(c);
    }
    private:
    BallController c;
};

DECLARE_INTERFACE(Ball)

#endif
